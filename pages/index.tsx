import io from "socket.io-client";
import { PrismaClient } from "@prisma/client";
import Modal from "components/Modal";
import Head from "next/head";
import { FormEvent, useEffect, useState } from "react";
import { makeBid } from "services/bids";
import styled from "styled-components";
import { Product, User } from "types";

let socket;

export default function Home(props) {
  const [products, setProducts] = useState<Product[]>(props.products);
  const [currentBid, setCurrentBid] = useState<Record<string, string>>({});
  const [modalIsOpen, setModalIsOpen] = useState(false);

  async function handleBid(e: FormEvent<HTMLFormElement>, product: Product) {
    e.preventDefault();

    const userExists = localStorage.getItem("user");
    if (!userExists) return setModalIsOpen(true);

    const user = JSON.parse(userExists) as User;

    const bidAmount = +currentBid[product.id];

    if (
      bidAmount && product.highestBid
        ? bidAmount > product.highestBid
        : bidAmount > product.minimumBid
    ) {
      makeBid(user, bidAmount, product.id);
      setCurrentBid({ ...currentBid, [product.id]: "" });

      socket.emit("new-bid", {
        productId: product.id,
        amount: bidAmount,
      });
    }
  }

  useEffect(() => {
    async function initSocket() {
      await fetch("http://localhost:3000/api/socket");

      socket = io();

      socket.on("update-highest-bid", ({ productId, amount }) => {
        console.log("received!", { productId, amount });
        const product = products.find((p) => p.id === productId);

        if (product) product.highestBid = amount;

        setProducts([...products]);
      });
    }

    initSocket();
  }, [products]);

  return (
    <>
      <Head>
        <title>Livestream Auktion | Helsingborgs Moské</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <StyledContainer>
        <Modal isOpen={modalIsOpen} onClose={() => setModalIsOpen(false)} />
        <StyledCardContainer>
          {products.map((product) => (
            <StyledCard key={product.id}>
              <StyledImage src={product.imageUrl} alt={product.name} />
              <StyledProduct>
                <div>{product.name}</div>
                <a href={product.companyUrl} target="_blank" rel="noreferrer">
                  {product.companyName}
                </a>
              </StyledProduct>
              <StyledBid>
                <strong>Marknadsvärde</strong>
                <div>{product.marketValue}</div>
                <strong>Minsta bud</strong>
                <div>{product.minimumBid}</div>
                {product.highestBid ? (
                  <>
                    <div>Högsta bud</div>
                    <div>{product.highestBid}</div>
                  </>
                ) : (
                  <div>Var först med att buda!</div>
                )}
                <form onSubmit={(e) => handleBid(e, product)}>
                  <input
                    required
                    min={product.minimumBid}
                    value={currentBid[product.id] || ""}
                    onChange={(e) =>
                      setCurrentBid({
                        ...currentBid,
                        [product.id]: e.target.value,
                      })
                    }
                  />
                  <StyledButton>Lägg bud</StyledButton>
                </form>
              </StyledBid>
            </StyledCard>
          ))}
        </StyledCardContainer>
      </StyledContainer>
    </>
  );
}

export async function getStaticProps() {
  const prisma = new PrismaClient();
  const products = await prisma.product.findMany();

  return {
    props: { products },
  };
}

const StyledContainer = styled.div`
  position: relative;
  background: url("background.jpg");
  padding: 40px 80px;
`;

const StyledCardContainer = styled.div`
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 24px;
`;

const StyledImage = styled.img`
  border-radius: 8px 0 0 8px;
  width: 100%;
`;

const StyledCard = styled.div`
  display: grid;
  gap: 24px;
  grid-template-columns: 1fr 2fr 1fr;
  background-color: white;
  border-radius: 8px;
`;

const StyledProduct = styled.div`
  margin-top: 16px;
`;

const StyledBid = styled.div`
  margin-top: 16px;
`;

const StyledButton = styled.button``;
